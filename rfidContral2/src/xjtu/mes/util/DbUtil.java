package xjtu.mes.util;

import java.sql.*;

import rfid.Log4JManager;


/**
 * @author 61773
 *
 */
public class DbUtil {
	/*
	 * 取得Connecttion
	 * @return
	 */
	public static Connection getConnection (){
		Connection conn = null;
		DbConfig dbconfig = ReadConfigDb.getInstance().getDbcofing();
		//测试是否配置好了实体类
		//System.out.println(dbconfig);
		String className=dbconfig.getClassName();
		String url = dbconfig.getUrl();;
		String user = dbconfig.getUser();;
		String password = dbconfig.getPassword();;
		try {
			Class.forName(className);
			conn = DriverManager.getConnection(url,user,password);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		
			Log4JManager.getInstance().writeLog("读取数据库，连接出错1");
		}catch(SQLException e){
			e.printStackTrace();
			Log4JManager.getInstance().writeLog("读取数据库，连接出错2");
		}catch(Exception e){
			e.printStackTrace();
			Log4JManager.getInstance().writeLog("读取数据库，连接出错3");
		}
		return conn;
	}
	
	/**
	 * @param conn
	 * @return
	 */
	public static Statement createStatemnt(Connection conn){
		Statement stm = null;
		try{
			stm = conn.createStatement();
		}catch(SQLException e){
			e.printStackTrace();
			
		}
		return stm;
	}
	
	public static PreparedStatement preparedStatement(Connection conn , String sql){
		PreparedStatement pstm = null;
		try{
			pstm = conn.prepareStatement(sql);
		}catch(SQLException e){
			e.printStackTrace();
			
		}
		return pstm;
	}
	public static PreparedStatement preparedStatemnt(Connection conn , String sql,int autoGeneratedKeys){
		PreparedStatement pstm = null;
		try{
			pstm = conn.prepareStatement(sql,autoGeneratedKeys);
		}catch(SQLException e){
			e.printStackTrace();
			
		}
		return pstm;
	}
	public static ResultSet executeQuery(Statement stm,String sql){
		ResultSet rs =null;
		try{
			rs=stm.executeQuery(sql);
		}catch(SQLException e){
			e.printStackTrace();
			
		}
		return rs;
	}
	
	public static int  executeUpdate(Statement stm,String sql){
		int  rs =0;
		try{
			rs=stm.executeUpdate(sql);
		}catch(SQLException e){
			e.printStackTrace();
			
		}
		return rs;
	}
	
	/**
	 * 关闭资源，Connection
	 * @param conn
	 */
	public static void close(Connection conn){
		if(conn!=null){
			try{
				conn.close();
				
			}catch(SQLException e){
				e.printStackTrace();
			}
			conn=null;
		}
		
			
	}
	public static void close(Statement stm){
		if(stm!=null){
			try{
				stm.close();
				
			}catch(SQLException e){
				e.printStackTrace();
			}
			stm=null;
		}
		
			
	}
	public static void close(PreparedStatement pstm){
		if(pstm!=null){
			try{
				pstm.close();
				
			}catch(SQLException e){
				e.printStackTrace();
			}
			pstm=null;
		}
		
			
	}
	public static void close(ResultSet rs){
		if(rs!=null){
			try{
				rs.close();
				rs = null;
			}catch(SQLException e){
				e.printStackTrace();
			}
		}
	}
	/**
	 * 设置自动提交事务为false，需要手动提交
	 * @param conn
	 */
	public static void beginTransaction (Connection conn){
		try{
			if(conn!=null){
				if(conn.getAutoCommit()==true){
					conn.setAutoCommit(false);
				}
			}
			
		}catch(SQLException e){
			e.printStackTrace();
			
		}
	}
	/**
	 * 需要手动提交事务
	 * @param conn
	 */
	public static void commitTransaction (Connection conn){
		try{
			if(conn!=null){
				if(conn.getAutoCommit()==false){
					conn.commit();
				}
			}
			
		}catch(SQLException e){
			e.printStackTrace();
			
		}
	}
	
	/**
	 * 回滚事务
	 * @param conn
	 */
	public static void rollbackTransaction (Connection conn){
		try{
			if(conn!=null){
				if(conn.getAutoCommit()==false){
					conn.rollback();
				}
			}
			
		}catch(SQLException e){
			e.printStackTrace();
			
		}
	}
	
	/**
	 * 返回connection的原始状态
	 * @param conn
	 */
	public static void resetConnection (Connection conn){
		try{
			if(conn!=null){
				if(conn.getAutoCommit()==false){
					conn.setAutoCommit(true);
				}else{
					conn.setAutoCommit(false);
				}
			}
			
		}catch(SQLException e){
			e.printStackTrace();
			
		}
	}
	/**
	 * 测试函数，run as java application
	 * @param args
	 */
	public static void main(String args[]){
		Connection conn=DbUtil.getConnection();
		System.out.println("连接数据库success");
	}
	
	
}
