package RFID_java;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.*;

import javax.servlet.http.HttpServletResponse;

public class RFID1 {
	/**
	 * @param args
	 */
	//能够读取RFID数据
	public static int portNo = 9020; // 与 tagstreamAddress 配置端口一致 
	static ServerSocket s;
	static Socket socket;
	static ArrayList<String>  taglist=new ArrayList<String>();
	private Timer time;
	static String apiKey="0001";
	static String deviceId1="1012";//天线1
	static String deviceId2="1013";//天线2
	static String deviceId3="1014";//天线3
//	static String deviceId4="1003";//天线4

	/// boolean flag=true; 
	
	
	public static void main(String[] args)  throws IOException{		
		 try {
			s = new ServerSocket(portNo);
			System.out.print("\n绑定端口"+portNo+"成功！" );
			System.out.println("The Server is start: " + s);        
        	 socket = s.accept();            
        	 System.out.println("answer:"+socket.getInetAddress().toString().substring(1)+ ","+socket.getPort());
             System.out.println("Accept the Client: " + socket);                   
             final BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);  
             while(true){
            	 TimerTask task= new TimerTask() {					
					@Override
					public void run() {
						String str="";						
							try {
								str = in.readLine();
								//解析并对数据进行预处理
								System.out.println(str); 
								String strTag=(str.substring(str.indexOf("Tag:"))).substring(4, 33);
								String deviceId=(str.substring(str.indexOf("Ant:"))).substring(4, 5);
									if (!taglist.contains(str)) {
										taglist.add(str);
										if(deviceId.equals("0"))
										  sentData2Api(strTag,deviceId1,apiKey);
										else if(deviceId.equals("1"))
										   sentData2Api(strTag,deviceId2,apiKey);
										else if(deviceId.equals("2"))
											   sentData2Api(strTag,deviceId3,apiKey);
							//			else if(deviceId.equals("3"))
							//				   sentData2Api(strTag,deviceId4,apiKey);
									}						
							} catch (IOException e) {
								e.printStackTrace();
								System.out.println("错误1");
							}   
					}
				};
				Timer timer=new Timer();
				timer.schedule(task,100,1000);
            	try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
					System.out.println("错误2");
				}
             }                   
         }catch(IOException e){
        	 e.printStackTrace();
        	 System.out.println("错误处");
         }finally 
 		{
             System.out.println("close the Server socket and the io.");
             socket.close();
             s.close();
      }		
        
	} 
	public void closed() throws IOException {
		 socket.close();
         try {
			s.close();
			System.out.println("关闭socket");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	//socket进行通信
	 public static void sentData2Api(String str,String deviceId,String apikey) throws IOException { 

		 Socket socket = null;
			try {
				socket = new Socket("127.0.0.1", 9992);
				//向服务器端第一次发送字符串   
				OutputStream netOut = socket.getOutputStream();
				DataOutputStream doc = new DataOutputStream(netOut);
				doc.writeUTF(apikey+deviceId+str);
				doc.close();
			//	in.close();
			} catch (UnknownHostException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				if (socket != null) {
					try {
						socket.close();
					} catch (IOException e) {
					}
				}
			}
	    }
}
