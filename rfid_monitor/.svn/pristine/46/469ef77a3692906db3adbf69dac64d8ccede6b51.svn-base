package db;
import java.sql.*;
import java.util.*;



public class DBConnection {
	public static ThreadLocal threadConnection = new ThreadLocal();
	public Connection conn = null;
	public DBConnection() {
	}
	public Connection getMySqlConnection(String url,String user,String pwd) {
		try {
			Class.forName("com.mysql.jdbc.Driver");
			conn = DriverManager.getConnection(url, user,pwd);
			if (conn == null)
				throw new SQLException("Can't connect MsSql!");
//			conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);//����������뼶�� 
		} catch (ClassNotFoundException e2) {
			e2.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return conn;
	}

	public Connection getCurrentConnection(String url,String user,String pwd) throws SQLException {
		conn = (Connection) threadConnection.get();
		if (conn == null) {
//			System.out.println("--------------������---------------------");
			conn = getMySqlConnection(url, user,pwd);
			threadConnection.set(conn);
		}
	//	System.out.print("conn successed!");
		return conn;
	}

	public Connection getCurrentConnection(boolean isTransaction,String url,String user,String pwd)
			throws SQLException {
		conn = (Connection) threadConnection.get();
		if (conn == null) {
			conn = getMySqlConnection(url, user,pwd);
			threadConnection.set(conn);
		}
		if (isTransaction)
			conn.setAutoCommit(false);
		return conn;
	}

	public void closeCurrentConnection() {
		try {
			Connection conn = (Connection) threadConnection.get();
			threadConnection.set(null);
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void closeConnection(Connection conn) throws SQLException {
		try {
			if (conn != null)
				conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void beginTransaction(String url,String user,String pwd) {
		try {
			getCurrentConnection(url, user,pwd).setAutoCommit(false);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void commitTransaction(String url,String user,String pwd) {
		try {
			getCurrentConnection(url, user,pwd).commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void rollbackTransaction(String url,String user,String pwd) {
		try {
			getCurrentConnection(url, user,pwd).rollback();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int executeUpdate(String sqlQuery, String sqlValue[])throws Exception {
		int count = 0;
		try {
			PreparedStatement ps = conn.prepareStatement(sqlQuery);
			if (sqlValue != null) {
				for (int i = 0; i < sqlValue.length; i++)
					ps.setString(i + 1, sqlValue[i]);
			}
			count = ps.executeUpdate();
		} catch (Exception e) {
			throw e;
		}
		return count;
	}

	public int executeUpdate(String sql)throws Exception {
		int count = 0;
		try {
		     Statement statement = conn.createStatement();
		     count = statement.executeUpdate (sql); //执行UPDATE INSERT DELETE用 executeUpdate  返回INT类型
		} catch (Exception e) {
			throw e;
		}
		return count;
	}
	//��¼��
	public int executeQuery(String sql){
		ResultSet rs = null;
		PreparedStatement ps;
		int count=0;
		try {
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery(sql);
			rs.next();
			count=rs.getInt(1);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return count;
	}
	public ArrayList executeQueryList(String sql) {
		Statement st = null;
		ArrayList alResult = new ArrayList();//存成“字段名”=“值”的形式，便于转化为json类型
		try {
			st = conn.createStatement();
			ResultSet rs = st.executeQuery(sql);
			ResultSetMetaData rsmd = rs.getMetaData();
			int count = rsmd.getColumnCount();
			String colum[] = new String[count];
			for (int i = 0; i < colum.length; i++)
				if (rsmd.getColumnName(i + 1) != null){
					colum[i] = rsmd.getColumnName(i + 1);
					System.out.print(colum[i]+"XXXXX");}//languageXXXXXdateXXXXXsalaryXXXXXwork_addressXXXXXjob_nameXXXXXidXXXXXlist.size=10
				else{
					colum[i] = rsmd.getColumnLabel(i + 1);
					System.out.print(colum[i]+"~~~~~~~~~~~\n");//nothing is printed
					}

			HashMap hdRow = null;
			String fieldValue = null;
			for (; rs.next(); alResult.add(hdRow)) {
				hdRow = new HashMap();
				System.out.print("\n");
				for (int i = 0; i < colum.length; i++) {
					int iType = rsmd.getColumnType(i + 1);
					if (iType == 2 || iType == 3) {
						if (rsmd.getScale(i + 1) == 0)
							fieldValue = String.valueOf(rs.getLong(i + 1));
						else
							fieldValue = rs.getString(i + 1);
					} 
					else if (iType == 8)
						fieldValue = String.valueOf(rs.getDouble(i + 1));
					else if (iType == 6 || iType == 7)
						fieldValue = String.valueOf(rs.getFloat(i + 1));
					else
						fieldValue = rs.getString(i + 1);
					if (fieldValue == null)
						fieldValue = "";
					else
						fieldValue = fieldValue.trim();
					System.out.print(fieldValue+"------");//输出字段对应的值
					hdRow.put(colum[i].toLowerCase(), fieldValue);//
				}
				System.out.print("\n"+hdRow.toString());//输出{id=14, work_address=, job_name=, salary=, language=, date=}
			}
		} catch (Exception e) {}
		return alResult;//list中的某一行数据为hashmap:{id=14, work_address=, job_name=, salary=, language=, date=}
	}
	
	public static void main(String arg[]) throws Exception {
		System.out.println("qqqqqqqqqqqqqqqqqqqqqqqqqqq");
		DBConnection db = new DBConnection();
//		HttpServletRequest request;
//		DbPara dbPara=(DbPara)request.getSession().getAttribute("DbPara");
		db.getCurrentConnection("jdbc:mysql://localhost:3306/mesdb?useUnicode=true&characterEncoding=UTF-8","root","xjtucad");
		db.executeQueryList("select * from tb_toolUse");
		db.closeCurrentConnection();
	}
}
