package Datebase;

import java.sql.*;
import java.util.*;

public class DBConnection {
	public static ThreadLocal<Connection> threadConnection = new ThreadLocal<Connection>();
	public Connection conn = null;
	public DBConnection() {
	}
	public Connection getMySqlConnection() {
		try {
     		Class.forName(Constants.driver_Sqlserver);
			conn = DriverManager.getConnection(Constants.url_Sqlserver, Constants.name_Sqlserver,Constants.password_Sqlserver);			
			if (conn == null)
				throw new SQLException("Can't connect!");
		} catch (ClassNotFoundException e2) {
			e2.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return conn;
	}

	public Connection getCurrentConnection() throws SQLException {
		conn = (Connection) threadConnection.get();
		if (conn == null) {
            conn = getMySqlConnection();
			threadConnection.set(conn);
			System.out.println("conn successed!!!!!!!!!!!!!!!");
		}
		
		return conn;
	}

	public Connection getCurrentConnection(boolean isTransaction)
			throws SQLException {
		conn = (Connection) threadConnection.get();
		if (conn == null) {
			conn = getMySqlConnection();
			threadConnection.set(conn);
		}
		if (isTransaction)
			conn.setAutoCommit(false);
		return conn;
	}

	public void closeCurrentConnection() {
		try {
			Connection conn = (Connection) threadConnection.get();
			threadConnection.set(null);
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void closeConnection(Connection conn) throws SQLException {
		try {
			if (conn != null)
				conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
		

  public void beginTransaction() {
		try {
			getCurrentConnection().setAutoCommit(false);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void commitTransaction() {
		try {
			getCurrentConnection().commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void rollbackTransaction() {
		try {
			getCurrentConnection().rollback();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public boolean creattable(String string) {
		boolean flag=false;
		try {
			Statement stat=conn.createStatement();
			flag=stat.execute(string);
		} catch (SQLException e) {
		}
		return flag;
	}
	//查询结果
	public ResultSet executeSelect(String sql){	
		ResultSet rs = null;
		try {
			Statement stat=conn.createStatement();
			rs=stat.executeQuery(sql);
		} catch (SQLException e) {
		}	
		return rs;
	}
//执行更新
	public int executeUpdate(String sqlQuery, String sqlValue[])throws Exception {
		int count = 0;
		try {
			PreparedStatement ps = conn.prepareStatement(sqlQuery);
			if (sqlValue != null) {
				for (int i = 0; i < sqlValue.length; i++)
					ps.setString(i + 1, sqlValue[i]);
			}
			count = ps.executeUpdate();
			
		} catch (Exception e) {
			throw e;
		}
		return count;
	}

	//返回查询结果集的行数
	public int executeQuery(String sql){
		ResultSet rs = null;
		PreparedStatement ps;
		int count=0;
		try {
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery(sql);
			rs.next();
			count=rs.getInt(1);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public ArrayList executeQueryList(String sql) {
		Statement st = null;
		ArrayList alResult = new ArrayList();
		try {
			st = conn.createStatement();
			ResultSet rs = st.executeQuery(sql);
			ResultSetMetaData rsmd = rs.getMetaData();
			int count = rsmd.getColumnCount();
			String colum[] = new String[count];
			for (int i = 0; i < colum.length; i++)
				if (rsmd.getColumnName(i + 1) != null){
					colum[i] = rsmd.getColumnName(i + 1);
		       	}
				else{
					colum[i] = rsmd.getColumnLabel(i + 1);
				}

			HashMap hdRow = null;
			String fieldValue = null;
			for (; rs.next(); alResult.add(hdRow)) {
				hdRow = new HashMap();
				for (int i = 0; i < colum.length; i++) {
					int iType = rsmd.getColumnType(i + 1);
					if (iType == 2 || iType == 3) {
						if (rsmd.getScale(i + 1) == 0)
							fieldValue = String.valueOf(rs.getLong(i + 1));
						else
							fieldValue = rs.getString(i + 1);
					} 
					else if (iType == 8)
						fieldValue = String.valueOf(rs.getDouble(i + 1));
					else if (iType == 6 || iType == 7)
						fieldValue = String.valueOf(rs.getFloat(i + 1));
					else
						fieldValue = rs.getString(i + 1);
					if (fieldValue == null)
						fieldValue = "";
					else
						fieldValue = fieldValue.trim();
					hdRow.put(colum[i], fieldValue);
				}			
			}
		} catch (Exception e) {}
		return alResult;
	}
	/*public static void main(String[] args) {
		DBConnection dbcon;
		dbcon = new DBConnection();
		try {
			dbcon.getCurrentConnection();			
		} catch (SQLException e1) {
		}	
		System.out.print("dddd");
	

	}*/

}


//Select TOP 3 * FROM(Select row_number() OVER (ORDER BY id ASC) AS F1Order, * FROM [Tools].[dbo].[Table])a Where a.F1Order >10
//select top 8 * from [Tools].[dbo].[Table] where id not in(select top 5 id from [Tools].[dbo].[Table] order by id asc) 